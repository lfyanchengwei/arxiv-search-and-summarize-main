name: 学术论文分析系统

on:
  workflow_dispatch:
    inputs:
      search_keywords:
        description: '检索关键词 (用逗号分隔)'
        required: true
        default: 'embodied,robotics,multimodal'
        type: string
      research_categories:
        description: '研究领域 (用逗号分隔)'
        required: true
        default: 'cs.AI,cs.RO,cs.CV,cs.LG'
        type: string
      start_date:
        description: '开始日期 (YYYY-MM-DD)'
        required: true
        default: '2024-01-01'
        type: string
      end_date:
        description: '结束日期 (YYYY-MM-DD)'
        required: true
        default: '2024-12-31'
        type: string
      max_papers:
        description: '最大论文数量'
        required: true
        default: '50'
        type: string
      preset_config:
        description: '预设配置'
        required: false
        default: 'custom'
        type: choice
        options:
        - custom
        - embodied_ai
        - multimodal_learning
        - large_language_models
        - computer_vision
        - reinforcement_learning
        - recent_trends
  schedule:
    # 每周一上午9点自动运行 (UTC时间)
    - cron: '0 9 * * 1'

env:
  PYTHON_VERSION: '3.9'

jobs:
  analyze-papers:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 创建输出目录
      run: mkdir -p output
    
    - name: 生成配置文件
      run: |
        python generate_github_config.py \
          --keywords "${{ github.event.inputs.search_keywords || 'embodied,robotics,multimodal' }}" \
          --categories "${{ github.event.inputs.research_categories || 'cs.AI,cs.RO,cs.CV,cs.LG' }}" \
          --start-date "${{ github.event.inputs.start_date || '2024-01-01' }}" \
          --end-date "${{ github.event.inputs.end_date || '2024-12-31' }}" \
          --max-papers "${{ github.event.inputs.max_papers || '50' }}" \
          --preset "${{ github.event.inputs.preset_config || 'custom' }}"
    
    - name: 运行论文分析
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python enhanced_main.py \
          --openai_api_key "${{ secrets.OPENAI_API_KEY }}" \
          --output_dir output \
          --skip_setup
    
    - name: 生成分析报告
      run: |
        python generate_report.py --output_dir output
    
    - name: 上传分析结果
      uses: actions/upload-artifact@v4
      with:
        name: paper-analysis-results-${{ github.run_number }}
        path: |
          output/*.csv
          output/*.md
          output/*.json
        retention-days: 30
    
    - name: 创建Issue报告 (可选)
      if: github.event_name == 'schedule' || github.event.inputs.create_issue == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // 读取分析摘要
          const summaryPath = path.join('output', 'analysis_summary.md');
          let summary = '分析完成，请查看Artifacts获取详细结果。';
          
          if (fs.existsSync(summaryPath)) {
            summary = fs.readFileSync(summaryPath, 'utf8');
          }
          
          // 创建Issue
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `学术论文分析报告 - ${new Date().toISOString().split('T')[0]}`,
            body: summary,
            labels: ['论文分析', '自动生成']
          });

  notify-completion:
    needs: analyze-papers
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 通知分析完成
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ needs.analyze-papers.result }}';
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          console.log(`论文分析${status === 'success' ? '成功完成' : '失败'}！`);
          console.log(`查看结果: ${runUrl}`);